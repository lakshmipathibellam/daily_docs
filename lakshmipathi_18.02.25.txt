Set theory operations.

Union : Combines all elements from two sets (duplicates are automatically removed).

EX : a = {1, 2, 3, 4, 5,}
     b = {3, 4, 5, 9, 5, 4}
     print(a | b) - {1, 2, 3, 4, 5, 9}

Intersection : It will return the common elements between sets.

EX : a = {1, 2, 3, 8, 5}
     b = {3, 4, 5, 1, 4, 9}
     print(a & b) - {1, 3, 5}

Difference : It will Returns the elements that are in the first set but not in the second.

EX : a = {1, 2, 3, 4, 5}
     b = {6, 7, 8, 1, 2}
     print(a - b)  - {3, 4, 5}

--------------------------------------------------------------------------------------------
Conditional statements :

If : To excite and display the output when the condition is true.

EX : a=10
     b=20
     if a<b:
        print('a is small number')

Elif : If first condition is not true then it will execute the elif block(when this one is true) 

EX : a=10
     b=20
     if a > b:
          print('a is a small number')
     elif b > a: 
          print('b is a big number') - it will execute

Else : if block and elif block both are failed. then this block will execute.

EX : a=10
     b=10
     if a > b:
          print('a is a small number')
     elif b > a:  # Corrected: Added a condition
          print('b is a big number')
     else:
         print('both are equal') - it will execute

Short Hand if : If you have only one statement to execute, you can put it on the same line as the if statement.

EX : if a > b: print("a is greater than b")

Short Hand If ... Else : If you have only one statement to execute, one for if, and one for else, you can put it all on the same line.

EX : a = 2
     b = 330
     print("A") if a > b else print("B")

Nested if : You can have if statements inside if statements, this is called nested if statements.

EX : x = 41
    if x > 10:
      print("Above ten,")
      if x > 20:
         print("and also above 20!")
      else:
        print("but not above 20.")

The pass Statement : if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error. pass is a useful tool during development when you need a syntactically valid block of code that doesnâ€™t do anything yet.

EX : a = 33
     b = 200
     if b > a:
          pass
----------------------------------------------------------------------------------------------------------------
LOOPS : If you want execute set of statements in multiple times at that we want use loops. we have mainly 2 loops in python 1.while 2. for 

while : Used when the number of iterations is not known and depends on a condition.

EX : i=1
     while i<=10:
           print(i)
           i+=1

For : Used when the number of iterations is known before start. and  used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).

EX : fruits = ["apple", "banana", "cherry"]
     for fruit in fruits:
               print(fruit)
-------------------------------------------------------------------------------------------------------------------

Controlling statements :

Break : Break is use to come out of the loop. when you writing a program at a particular point we satisfy the condition then you will come out of the loop at that time we use break.

EX : i=1
     while i<=10:
           print(i)
           if i==5:
              break
           i+=1

Continue : Continue is use to skip the current iteration and moves to next iteration.
EX : i = 0
     while i < 6:
          i += 1
          if i == 3:
             continue
          print(i)























          
   