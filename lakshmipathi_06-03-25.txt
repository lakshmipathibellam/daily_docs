
GIT----->2 TYPES
1) CVCS: Centralized VCS
SVN: Sub Version Control--->It is the oldest version of GIT.
-->It consists of only the current version of data but it does not consist any previous version data.
Disadvantages:
1. It consists of only current version data
2.each and every developer should connect to the server to develop.
3.less security: server can be accessed by everyone.
4.It does not have any backup facility. (If server is crashed then everything will be lost).
5.server /client-server-1; clients can be many.
------------------------------------------------------------------------------------------------------------
2) DVCS: Decentralized VCS/Distributed VCS
GitHub: Server
git: Client
-->Git is the latest version of SVN
-->Repositories --Folders
-->Local Repository-Folders that are present /saved in our Laptops
-->Remote Repository/Global repository-folders that are saved in global form/github(server).
-->git bash: client
-->GitHub: server
-------------------------------------------------------------------------------------------------------------------
Protocols:
-->git follows 2 types of protocols:
1.HTTP-hyper text transfer protocol security. (used only for our personal use)
Banking application--OTP: Security.
2.SSH-SECURE SHELL. (In real-time used protocol in GIT)
Real-time environments:
1.development: developers--success
2.QA: assurance-success
3.UAT: User acceptance testing-success
4.Production:S/W Or application of a project will be deployed to the server.
---------------------------------------------------------------------------------------------------------------------

GIT COMMANDS :

---> Git Configuration commands :
git config --global user.name "Your Name"
git config --global user. email "your-email@example.com"
git config --global --list    # View global configurations

---> Initialize a Repository :
git init -->Initialize a new Git repository
git clone <repo_url> -->Clone an existing repository


---> Staging and Committing :
git status                --> To Check the status of files
git add <file>            --> Stage a specific file
git add .                 --> Stage all files
git commit -m "Message"   --> Commit changes with a message
git commit -am "Message"  --> Add & commit tracked files in one step

---> Branching and Merging :

git branch --> List branches
git branch <branch_name>   --> Create a new branch
git checkout <branch>      --> Switch to a branch
git checkout -b <branch>   --> Create and switch to a new branch
git merge <branch>         --> Merge a branch into the current branch
git branch -d <branch>     --> Delete a branch

---> Push and Pull from Remote :

git remote -v --> View remote repositories
git remote add origin <URL> --> Add a remote repository
git push -u origin <branch> --> Push code to remote
git pull origin <branch>    --> Pull latest changes from remote
git fetch                   --> Fetch changes without merging







































